"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
<<<<<<< HEAD
const tslib_1 = require("tslib");
=======
>>>>>>> google-maps-tabs
const utils_object_1 = require("@ionic/utils-object");
const lodash = require("lodash");
const errors_1 = require("../errors");
const string_1 = require("../utils/string");
const validators_1 = require("./validators");
class BaseCommand {
    constructor(namespace) {
        this.namespace = namespace;
    }
<<<<<<< HEAD
    validate(argv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const metadata = yield this.getMetadata();
            if (!metadata.inputs) {
                return;
            }
            const errors = [];
            for (const i in metadata.inputs) {
                const input = metadata.inputs[i];
                if (input.validators && input.validators.length > 0) {
                    try {
                        validators_1.validate(argv[i], input.name, [...input.validators]);
                    }
                    catch (e) {
                        if (!(e instanceof errors_1.InputValidationError)) {
                            throw e;
                        }
                        errors.push(e.errors);
                    }
                }
            }
            if (errors.length > 0) {
                throw new errors_1.InputValidationError('Invalid inputs.', lodash.flatten(errors));
            }
        });
=======
    async validate(argv) {
        const metadata = await this.getMetadata();
        if (!metadata.inputs) {
            return;
        }
        const errors = [];
        for (const i in metadata.inputs) {
            const input = metadata.inputs[i];
            if (input.validators && input.validators.length > 0) {
                try {
                    validators_1.validate(argv[i], input.name, [...input.validators]);
                }
                catch (e) {
                    if (!(e instanceof errors_1.InputValidationError)) {
                        throw e;
                    }
                    errors.push(e.errors);
                }
            }
        }
        if (errors.length > 0) {
            throw new errors_1.InputValidationError('Invalid inputs.', lodash.flatten(errors));
        }
>>>>>>> google-maps-tabs
    }
}
exports.BaseCommand = BaseCommand;
exports.CommandMapDefault = Symbol('default');
class BaseCommandMap extends utils_object_1.AliasedMap {
}
exports.BaseCommandMap = BaseCommandMap;
class BaseNamespaceMap extends utils_object_1.AliasedMap {
}
exports.BaseNamespaceMap = BaseNamespaceMap;
class BaseNamespace {
    constructor(parent) {
        this.parent = parent;
    }
    get root() {
        let n = this;
        while (n.parent) {
            n = n.parent;
        }
        return n;
    }
    // TODO: https://github.com/Microsoft/TypeScript/issues/9659
<<<<<<< HEAD
    getNamespaces() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new BaseNamespaceMap();
        });
    }
    // TODO: https://github.com/Microsoft/TypeScript/issues/9659
    getCommands() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new BaseCommandMap();
        });
=======
    async getNamespaces() {
        return new BaseNamespaceMap();
    }
    // TODO: https://github.com/Microsoft/TypeScript/issues/9659
    async getCommands() {
        return new BaseCommandMap();
>>>>>>> google-maps-tabs
    }
    /**
     * Locate commands and namespaces given a set of inputs.
     *
     * Recursively walk down the tree of namespaces available within this
     * namespace to find the command that we will execute or the right-most
     * namespace matched if the command is not found.
     *
     * The resolved object looks like this:
     *
     *    {
     *      obj: command or namespace,
     *      args: the leftover arguments,
     *      path: the path taken to get to the result which comprises tuples of <arg, command or namespace>
     *    }
     *
     * @param argv The set of command-line arguments to use to locate.
     */
<<<<<<< HEAD
    locate(argv, { useAliases = true } = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const _locate = (inputs, parent, path) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const [key] = inputs;
                const children = yield parent.getNamespaces();
                const nsgetter = useAliases ? children.resolveAlias(key) : children.get(key);
                if (!nsgetter || typeof nsgetter === 'string' || typeof nsgetter === 'symbol') {
                    const commands = yield parent.getCommands();
                    const cmdgetter = useAliases ? commands.resolveAlias(key) : commands.get(key);
                    if (cmdgetter && typeof cmdgetter !== 'string' && typeof cmdgetter !== 'symbol') {
                        const cmd = yield cmdgetter();
                        return { args: inputs.slice(1), obj: cmd, path: [...path, [key, cmd]] };
                    }
                    const defaultcmdgetter = commands.get(exports.CommandMapDefault);
                    if (defaultcmdgetter && typeof defaultcmdgetter !== 'string' && typeof defaultcmdgetter !== 'symbol') {
                        const cmd = yield defaultcmdgetter();
                        if (path.length > 0) {
                            // The default command was found via the namespace, so we replace the
                            // previous path entry (the namespace which contains this default
                            // command) with the command itself.
                            path[path.length - 1][1] = cmd;
                        }
                        return { args: inputs, obj: cmd, path };
                    }
                    return { args: inputs, obj: parent, path };
                }
                const child = yield nsgetter();
                return _locate(inputs.slice(1), child, [...path, [key, child]]);
            });
            const metadata = yield this.getMetadata();
            // TODO: typescript complains about `this`. Calling this method on
            // BaseNamespace would be unsafe if the class weren't abstract. Typescript
            // bug? I may be wrong.
            return _locate(argv, this, [[metadata.name, this]]);
        });
=======
    async locate(argv, { useAliases = true } = {}) {
        const _locate = async (inputs, parent, path) => {
            const [key] = inputs;
            const children = await parent.getNamespaces();
            const nsgetter = useAliases ? children.resolveAlias(key) : children.get(key);
            if (!nsgetter || typeof nsgetter === 'string' || typeof nsgetter === 'symbol') {
                const commands = await parent.getCommands();
                const cmdgetter = useAliases ? commands.resolveAlias(key) : commands.get(key);
                if (cmdgetter && typeof cmdgetter !== 'string' && typeof cmdgetter !== 'symbol') {
                    const cmd = await cmdgetter();
                    return { args: inputs.slice(1), obj: cmd, path: [...path, [key, cmd]] };
                }
                const defaultcmdgetter = commands.get(exports.CommandMapDefault);
                if (defaultcmdgetter && typeof defaultcmdgetter !== 'string' && typeof defaultcmdgetter !== 'symbol') {
                    const cmd = await defaultcmdgetter();
                    if (path.length > 0) {
                        // The default command was found via the namespace, so we replace the
                        // previous path entry (the namespace which contains this default
                        // command) with the command itself.
                        path[path.length - 1][1] = cmd;
                    }
                    return { args: inputs, obj: cmd, path };
                }
                return { args: inputs, obj: parent, path };
            }
            const child = await nsgetter();
            return _locate(inputs.slice(1), child, [...path, [key, child]]);
        };
        const metadata = await this.getMetadata();
        // TODO: typescript complains about `this`. Calling this method on
        // BaseNamespace would be unsafe if the class weren't abstract. Typescript
        // bug? I may be wrong.
        return _locate(argv, this, [[metadata.name, this]]);
>>>>>>> google-maps-tabs
    }
    /**
     * Get all command metadata in a flat structure.
     */
<<<<<<< HEAD
    getCommandMetadataList() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const _getCommandMetadataList = (parent, path) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const commandsInNamespace = yield parent.getCommands();
                const commandAliasesInNamespace = commandsInNamespace.getAliases();
                const commandList = [];
                // Gather all commands for a namespace and turn them into simple key value
                // objects. Also keep a record of the namespace path.
                yield Promise.all([...commandsInNamespace.entries()].map(([k, cmdgetter]) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    if (typeof cmdgetter === 'string' || typeof cmdgetter === 'symbol') {
                        return;
                    }
                    const command = yield cmdgetter();
                    const commandAliases = (commandAliasesInNamespace.get(k) || []).filter((a) => typeof a === 'string').map(a => [...path.map(([p]) => p), a].join(' '));
                    const commandMetadata = yield command.getMetadata();
                    const commandPath = [...path];
                    if (typeof k === 'string') {
                        commandPath.push([k, command]);
                    }
                    // TODO: can't use spread: https://github.com/Microsoft/TypeScript/pull/13288
                    const result = lodash.assign({}, commandMetadata, { command, namespace: parent, aliases: commandAliases, path: commandPath });
                    commandList.push(result);
                })));
                commandList.sort((a, b) => string_1.strcmp(a.name, b.name));
                const children = yield parent.getNamespaces();
                const namespacedCommandList = [];
                // If this namespace has children then get their commands
                if (children.size > 0) {
                    yield Promise.all([...children.entries()].map(([k, nsgetter]) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        if (typeof nsgetter === 'string' || typeof nsgetter === 'symbol') {
                            return;
                        }
                        const ns = yield nsgetter();
                        const commandPath = [...path];
                        if (typeof k === 'string') {
                            commandPath.push([k, ns]);
                        }
                        const cmds = yield _getCommandMetadataList(ns, commandPath);
                        namespacedCommandList.push(...cmds);
                    })));
                }
                return [...commandList, ...namespacedCommandList];
            });
            const metadata = yield this.getMetadata();
            // TODO: typescript complains about `this`. Calling this method on
            // BaseNamespace would be unsafe if the class weren't abstract. Typescript
            // bug? I may be wrong.
            return _getCommandMetadataList(this, [[metadata.name, this]]);
        });
    }
    groupCommandsByNamespace(commands) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const summaries = new Map();
            const grouped = new Map();
            yield Promise.all(commands.map((cmd) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const nsmeta = yield cmd.namespace.getMetadata();
                const aliases = [];
                if (cmd.namespace.parent) {
                    const siblings = yield cmd.namespace.parent.getNamespaces();
                    aliases.push(...(siblings.getAliases().get(nsmeta.name) || []).filter((a) => typeof a === 'string'));
                }
                summaries.set(nsmeta.name, nsmeta.summary);
                let entry = grouped.get(nsmeta.name);
                if (!entry) {
                    entry = Object.assign({ namespace: cmd.namespace, commands: [], aliases }, nsmeta, { description: nsmeta.description ? nsmeta.description : '', footnotes: nsmeta.footnotes ? nsmeta.footnotes : [], groups: nsmeta.groups ? nsmeta.groups : [] });
                    grouped.set(nsmeta.name, entry);
                }
                entry.commands.push(cmd);
            })));
            return [...grouped.values()];
        });
=======
    async getCommandMetadataList() {
        const _getCommandMetadataList = async (parent, path) => {
            const commandsInNamespace = await parent.getCommands();
            const commandAliasesInNamespace = commandsInNamespace.getAliases();
            const commandList = [];
            // Gather all commands for a namespace and turn them into simple key value
            // objects. Also keep a record of the namespace path.
            await Promise.all([...commandsInNamespace.entries()].map(async ([k, cmdgetter]) => {
                if (typeof cmdgetter === 'string' || typeof cmdgetter === 'symbol') {
                    return;
                }
                const command = await cmdgetter();
                const commandAliases = (commandAliasesInNamespace.get(k) || []).filter((a) => typeof a === 'string').map(a => [...path.map(([p]) => p), a].join(' '));
                const commandMetadata = await command.getMetadata();
                const commandPath = [...path];
                if (typeof k === 'string') {
                    commandPath.push([k, command]);
                }
                // TODO: can't use spread: https://github.com/Microsoft/TypeScript/pull/13288
                const result = lodash.assign({}, commandMetadata, { command, namespace: parent, aliases: commandAliases, path: commandPath });
                commandList.push(result);
            }));
            commandList.sort((a, b) => string_1.strcmp(a.name, b.name));
            const children = await parent.getNamespaces();
            const namespacedCommandList = [];
            // If this namespace has children then get their commands
            if (children.size > 0) {
                await Promise.all([...children.entries()].map(async ([k, nsgetter]) => {
                    if (typeof nsgetter === 'string' || typeof nsgetter === 'symbol') {
                        return;
                    }
                    const ns = await nsgetter();
                    const commandPath = [...path];
                    if (typeof k === 'string') {
                        commandPath.push([k, ns]);
                    }
                    const cmds = await _getCommandMetadataList(ns, commandPath);
                    namespacedCommandList.push(...cmds);
                }));
            }
            return [...commandList, ...namespacedCommandList];
        };
        const metadata = await this.getMetadata();
        // TODO: typescript complains about `this`. Calling this method on
        // BaseNamespace would be unsafe if the class weren't abstract. Typescript
        // bug? I may be wrong.
        return _getCommandMetadataList(this, [[metadata.name, this]]);
    }
    async groupCommandsByNamespace(commands) {
        const summaries = new Map();
        const grouped = new Map();
        await Promise.all(commands.map(async (cmd) => {
            const nsmeta = await cmd.namespace.getMetadata();
            const aliases = [];
            if (cmd.namespace.parent) {
                const siblings = await cmd.namespace.parent.getNamespaces();
                aliases.push(...(siblings.getAliases().get(nsmeta.name) || []).filter((a) => typeof a === 'string'));
            }
            summaries.set(nsmeta.name, nsmeta.summary);
            let entry = grouped.get(nsmeta.name);
            if (!entry) {
                entry = {
                    namespace: cmd.namespace,
                    commands: [],
                    aliases,
                    ...nsmeta,
                    description: nsmeta.description ? nsmeta.description : '',
                    footnotes: nsmeta.footnotes ? nsmeta.footnotes : [],
                    groups: nsmeta.groups ? nsmeta.groups : [],
                };
                grouped.set(nsmeta.name, entry);
            }
            entry.commands.push(cmd);
        }));
        return [...grouped.values()];
>>>>>>> google-maps-tabs
    }
}
exports.BaseNamespace = BaseNamespace;
class Command extends BaseCommand {
}
exports.Command = Command;
class Namespace extends BaseNamespace {
}
exports.Namespace = Namespace;
class CommandMap extends BaseCommandMap {
}
exports.CommandMap = CommandMap;
class NamespaceMap extends BaseNamespaceMap {
}
exports.NamespaceMap = NamespaceMap;
/**
 * Given a command object, backtrack through the command's namespace to compile
 * a list of command path items which represents how the command was
 * found/constructed.
 */
<<<<<<< HEAD
function generateCommandPath(cmd) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const ns = cmd.namespace;
        const cmdmeta = yield cmd.getMetadata();
        const _cmdpath = (namespace) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const nsmeta = yield namespace.getMetadata();
            const nspath = [nsmeta.name, namespace];
            if (!namespace.parent) {
                return [nspath];
            }
            return [...(yield _cmdpath(namespace.parent)), nspath];
        });
        return [...(yield _cmdpath(ns)), [cmdmeta.name, cmd]];
    });
=======
async function generateCommandPath(cmd) {
    const ns = cmd.namespace;
    const cmdmeta = await cmd.getMetadata();
    const _cmdpath = async (namespace) => {
        const nsmeta = await namespace.getMetadata();
        const nspath = [nsmeta.name, namespace];
        if (!namespace.parent) {
            return [nspath];
        }
        return [...(await _cmdpath(namespace.parent)), nspath];
    };
    return [...(await _cmdpath(ns)), [cmdmeta.name, cmd]];
>>>>>>> google-maps-tabs
}
exports.generateCommandPath = generateCommandPath;
